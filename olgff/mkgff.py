#! /usr/bin/env python
# Create sample GFF files
# Henry Li

import argparse
import random
import gzip

"""argparse statements"""
parser = argparse.ArgumentParser(
	description='Generate sample GFF files.',
	formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('--seqname', type=str, default='X',
					help='Name of the chromosome or scaffold')
parser.add_argument('--source', type=str, default='MKGFF',
					help='Source of the feature')
parser.add_argument('--feature', type=str, default='gene',
					choices=['CDS', 'exon', 'gene', 'ncRNA',
							 'pseudogene', 'rRNA', 'sequence_feature', 'tRNA'],
					help='Select feature type')
parser.add_argument('-n', '--numl', type=int, default=100,
					help=('Set number of lines\n'
						  'Default = 100'))
parser.add_argument('-s', '--seed', type=int, default=1,
					help=('Seed for random number generator\n'
						  'Default = 1'))
parser.add_argument('--maxfl', type=int, default=1000,
					help=('Maximum feature length\n'
						  'Default = 1000'))
parser.add_argument('--length', type=int, default=10000,
					help=('Max value for the last feature start location\n'
						  'Default = 10000'))
parser.add_argument('-o', '--output', type=str,
					help=('Output file name\n'
						  'Default = "mygff.gff"'))
parser.add_argument('-c', '--compress', action='store_true',
					help='Compress the output file to .gz')

args = parser.parse_args()

"""set seed for random"""
random.seed(args.seed)

"""generate GFF entries"""
entries = []
start_positions = sorted(random.sample(range(1, args.length), args.numl))
previous_end = 0
for start in start_positions:
	min_end = max(start + 1, previous_end + 1)
	max_end = min(start + args.maxfl, args.length)

	if min_end > max_end:
		continue

	end = random.randint(min_end, max_end)
	entry = [args.seqname, args.source, args.feature, start, end, '.', '.', '.', '.']
	entries.append(entry)
	previous_end = end

"""write the GFF output"""
gff_content = f"##gff-version 3\n##generated by mkgff\n##seed used {args.seed}\n##number of lines {args.numl}\n"
for entry in entries:
	gff_content += "\t".join(map(str, entry)) + "\n"

if args.output:
	output_file = args.output
else:
	output_file = "mygff.gff"

if args.compress and not output_file.endswith('.gz'):
	output_file += ".gz"

if args.compress:
	with gzip.open(output_file, 'wt') as f:
		f.write(gff_content)
elif args.output:
	with open(output_file, 'w') as f:
		f.write(gff_content)
else:
	print(gff_content)
